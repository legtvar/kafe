stages:
  - manual
  - build
  # - test
  - deploy

build-api:
  image: alpine:latest
  stage: build
  variables:
    NUGET_PACKAGES: $CI_PROJECT_DIR/.nuget
  script:
    - apk update
    - apk add dotnet7-sdk
    - dotnet build Kafe.sln
  tags:
    - shared-fi
  cache:
    paths:
      - .nuget/
  rules:
    - if: $IS_CLEANUP != "true" && $IS_BACKUP != "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "api")
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH

build-web:
  image: alpine:latest
  stage: build
  variables:
    CI: ''
  script:
    - apk update
    - apk add npm
    - cd Web
    - npm ci
    - npm run build
  tags:
    - shared-fi
  cache:
    paths:
      - Web/node_modules
  artifacts:
    paths:
      - Web/build
    expire_in: 42s
  rules:
    - if: $IS_CLEANUP != "true" && $IS_BACKUP != "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "web")
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH

migrate-wma:
  image: alpine:latest
  stage: manual
  variables:
    PGPASSWORD: postgres
  timeout: 3h
  script:
    #- apk update
    #- apk add dotnet7-sdk postgresql-client ffmpeg
    #- psql -h kafe-db -p 5432 -U postgres -c "DROP DATABASE lemma"
    #- cat /mnt/kafe/lemma-08-03-2023-all.sql | psql -h kafe-db -p 5432 -U postgres
    #- dotnet build Migrator
    #- cp "$APPSETTINGS_MIGRATOR" "./Migrator/appsettings.local.json"
    #- dotnet run --project Migrator --framework net7.0
    - echo "This job has been crippled on purpose."
    - exit 1
  tags:
    - lemma-new-docker
  when: manual
  rules:
    - if: $IS_CLEANUP != "true" && $IS_BACKUP != "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "api")

publish-api:
  stage: manual
  script:
    - cp "$APPSETTINGS_PRODUCTION" "./Api/appsettings.local.json"
    - docker-compose -f docker-compose.yml build api
    - docker-compose -f docker-compose.yml up -d api
  tags:
    - lemma-new
  when: manual
  rules:
    - if: $IS_CLEANUP != "true" && $IS_BACKUP != "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "api")

publish-all:
  stage: manual
  script:
    - cp "$APPSETTINGS_PRODUCTION" "./Api/appsettings.local.json"
    - docker-compose -f docker-compose.yml build
    - docker-compose -f docker-compose.yml down
    - docker-compose -f docker-compose.yml up -d
  tags:
    - lemma-new
  when: manual
  rules:
    - if: $IS_CLEANUP != "true" && $IS_BACKUP != "true" && $CI_COMMIT_BRANCH == "main"

publish-web:
  stage: manual
  script:
    - docker-compose -f docker-compose.yml build
    - docker-compose -f docker-compose.yml up -d web
  tags:
    - lemma-new
  when: manual
  rules:
    - if: $IS_CLEANUP != "true" && $IS_BACKUP != "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "api" || $CI_COMMIT_BRANCH == "web")

cleanup-images:
  stage: manual
  timeout: 1h
  script:
    - docker image prune --force
  tags:
    - lemma-new
  rules:
    - if: $IS_CLEANUP == "true"

backup-db:
  stage: manual
  timeout: 10min
  script:
    - name="backup_$(date +%Y-%m-%d)"
    - docker exec kafe_db_1 sh -c "rm -rf '/tmp/$name' && pg_dump -U postgres -d kafe -F d -f '/tmp/$name' && tar -cf '/tmp/$name.tar' -C '/tmp/$name' ."
    - docker cp kafe_db_1:/tmp/$name.tar .
  artifacts:
    paths:
      - "backup_*.tar"
    expire_in: "90 days"
  tags:
    - lemma-new
  rules:
    - if: $IS_BACKUP == "true"
