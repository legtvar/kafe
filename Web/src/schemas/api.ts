/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/artifact": {
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ArtifactCreationDto"];
          "text/json": components["schemas"]["ArtifactCreationDto"];
          "application/*+json": components["schemas"]["ArtifactCreationDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/api/v1/author/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["AuthorDetailDto"];
            "application/json": components["schemas"]["AuthorDetailDto"];
            "text/json": components["schemas"]["AuthorDetailDto"];
          };
        };
      };
    };
  };
  "/api/v1/authors": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["AuthorListDto"])[];
            "application/json": (components["schemas"]["AuthorListDto"])[];
            "text/json": (components["schemas"]["AuthorListDto"])[];
          };
        };
      };
    };
  };
  "/api/v1/playlist/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PlaylistDetailDto"];
            "application/json": components["schemas"]["PlaylistDetailDto"];
            "text/json": components["schemas"]["PlaylistDetailDto"];
          };
        };
      };
    };
  };
  "/api/v1/playlists": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["PlaylistListDto"])[];
            "application/json": (components["schemas"]["PlaylistListDto"])[];
            "text/json": (components["schemas"]["PlaylistListDto"])[];
          };
        };
      };
    };
  };
  "/api/v1/project/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ProjectDetailDto"];
            "application/json": components["schemas"]["ProjectDetailDto"];
            "text/json": components["schemas"]["ProjectDetailDto"];
          };
        };
      };
    };
  };
  "/api/v1/project-group/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ProjectGroupDetailDto"];
            "application/json": components["schemas"]["ProjectGroupDetailDto"];
            "text/json": components["schemas"]["ProjectGroupDetailDto"];
          };
        };
      };
    };
  };
  "/api/v1/project-groups": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["ProjectGroupListDto"])[];
            "application/json": (components["schemas"]["ProjectGroupListDto"])[];
            "text/json": (components["schemas"]["ProjectGroupListDto"])[];
          };
        };
      };
    };
  };
  "/api/v1/projects": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["ProjectListDto"])[];
            "application/json": (components["schemas"]["ProjectListDto"])[];
            "text/json": (components["schemas"]["ProjectListDto"])[];
          };
        };
      };
    };
  };
  "/api/v1/artifact/{artifactId}/video": {
    post: {
      parameters: {
        path: {
          ArtifactId: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            File?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/api/v1/video/{shardId}/{variant}": {
    get: {
      parameters: {
        path: {
          ShardId: string;
          Variant: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/octet-stream": string;
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ArtifactCreationDto: {
      name: components["schemas"]["LocalizedString"];
      /** Format: hrib */
      containingProject?: string | null;
    };
    ArtifactDetailDto: {
      /** Format: hrib */
      id: string;
      name: components["schemas"]["LocalizedString"];
      shards: (components["schemas"]["ShardListDto"])[];
      containingProjectIds: (string)[];
    };
    AuthorDetailDto: {
      id: string;
      name: string;
      uco?: string | null;
      email?: string | null;
      phone?: string | null;
    };
    AuthorListDto: {
      id: string;
      name: string;
    };
    LocalizedString: Record<string, never>;
    PlaylistDetailDto: {
      id: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      visibility: components["schemas"]["Visibility"];
      videos: (string)[];
    };
    PlaylistListDto: {
      id: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      visibility: components["schemas"]["Visibility"];
    };
    ProjectAuthorDto: {
      id: string;
      name: string;
      roles: (string)[];
    };
    ProjectDetailDto: {
      id: string;
      projectGroupId: string;
      projectGroupName: components["schemas"]["LocalizedString"];
      genre: components["schemas"]["LocalizedString"];
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      visibility: components["schemas"]["Visibility"];
      /** Format: date-time */
      releaseDate: string;
      crew: (components["schemas"]["ProjectAuthorDto"])[];
      cast: (components["schemas"]["ProjectAuthorDto"])[];
      artifacts: (components["schemas"]["ArtifactDetailDto"])[];
    };
    ProjectGroupDetailDto: {
      id: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      /** Format: date-time */
      deadline: string;
      isOpen: boolean;
    };
    ProjectGroupListDto: {
      id: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      /** Format: date-time */
      deadline: string;
      isOpen: boolean;
    };
    ProjectListDto: {
      id: string;
      projectGroupId: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      visibility: components["schemas"]["Visibility"];
      /** Format: date-time */
      releaseDate: string;
    };
    /** @enum {string} */
    ShardKind: "Invalid" | "Video" | "Image" | "Subtitles";
    ShardListDto: {
      /** Format: hrib */
      id: string;
      kind: components["schemas"]["ShardKind"];
      variants: (string)[];
    };
    /** @enum {string} */
    Visibility: "Unknown" | "Private" | "Internal" | "Public";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
