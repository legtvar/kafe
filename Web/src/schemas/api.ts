/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v{version}/author/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["AuthorDetailDto"];
            "application/json": components["schemas"]["AuthorDetailDto"];
            "text/json": components["schemas"]["AuthorDetailDto"];
          };
        };
      };
    };
  };
  "/api/v{version}/authors": {
    get: {
      parameters: {
        path: {
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["AuthorListDto"])[];
            "application/json": (components["schemas"]["AuthorListDto"])[];
            "text/json": (components["schemas"]["AuthorListDto"])[];
          };
        };
      };
    };
  };
  "/api/v{version}/playlist/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PlaylistDetailDto"];
            "application/json": components["schemas"]["PlaylistDetailDto"];
            "text/json": components["schemas"]["PlaylistDetailDto"];
          };
        };
      };
    };
  };
  "/api/v{version}/playlists": {
    get: {
      parameters: {
        path: {
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["PlaylistListDto"])[];
            "application/json": (components["schemas"]["PlaylistListDto"])[];
            "text/json": (components["schemas"]["PlaylistListDto"])[];
          };
        };
      };
    };
  };
  "/api/v{version}/project/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ProjectDetailDto"];
            "application/json": components["schemas"]["ProjectDetailDto"];
            "text/json": components["schemas"]["ProjectDetailDto"];
          };
        };
      };
    };
  };
  "/api/v{version}/project-group/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ProjectGroupDetailDto"];
            "application/json": components["schemas"]["ProjectGroupDetailDto"];
            "text/json": components["schemas"]["ProjectGroupDetailDto"];
          };
        };
      };
    };
  };
  "/api/v{version}/project-groups": {
    get: {
      parameters: {
        path: {
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["ProjectGroupListDto"])[];
            "application/json": (components["schemas"]["ProjectGroupListDto"])[];
            "text/json": (components["schemas"]["ProjectGroupListDto"])[];
          };
        };
      };
    };
  };
  "/api/v{version}/projects": {
    get: {
      parameters: {
        path: {
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["ProjectListDto"])[];
            "application/json": (components["schemas"]["ProjectListDto"])[];
            "text/json": (components["schemas"]["ProjectListDto"])[];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    AudioCodec: "None" | "WAV" | "FLAC" | "MP3";
    AuthorDetailDto: {
      id: string;
      name: string;
      uco?: string | null;
      email?: string | null;
      phone?: string | null;
    };
    AuthorListDto: {
      id: string;
      name: string;
    };
    /** @enum {string} */
    ContainerFormat: "None" | "MP4" | "M4V" | "MKV";
    LocalizedString: Record<string, never>;
    PlaylistDetailDto: {
      id: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      visibility: components["schemas"]["Visibility"];
      videos: (string)[];
    };
    PlaylistListDto: {
      id: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      visibility: components["schemas"]["Visibility"];
    };
    ProjectDetailDto: {
      id: string;
      projectGroupId: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      visibility: components["schemas"]["Visibility"];
      authors: (string)[];
      /** Format: date-time */
      releaseDate: string;
    };
    ProjectGroupDetailDto: {
      id: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      /** Format: date-time */
      deadline: string;
      isOpen: boolean;
      validationRules: components["schemas"]["ValidationRules"];
    };
    ProjectGroupListDto: {
      id: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      /** Format: date-time */
      deadline: string;
      isOpen: boolean;
    };
    ProjectListDto: {
      id: string;
      projectGroupId: string;
      name: components["schemas"]["LocalizedString"];
      description: components["schemas"]["LocalizedString"];
      visibility: components["schemas"]["Visibility"];
      /** Format: date-time */
      releaseDate: string;
    };
    /** @enum {string} */
    SubtitleFormat: "None" | "SRT" | "ASS";
    ValidationRules: {
      /** Format: int32 */
      minimumWidth?: number | null;
      /** Format: int32 */
      minimumHeight?: number | null;
      /** Format: int64 */
      maxFileSize?: number | null;
      allowedContainerFormats: (components["schemas"]["ContainerFormat"])[];
      allowedVideoCodecs: (components["schemas"]["VideoCodec"])[];
      allowedAudioCodecs: (components["schemas"]["AudioCodec"])[];
      allowedVideoFramerates: (components["schemas"]["VideoFramerate"])[];
      allowedSubtitleFormats: (components["schemas"]["SubtitleFormat"])[];
    };
    /** @enum {string} */
    VideoCodec: "None" | "H264" | "H265";
    /** @enum {string} */
    VideoFramerate: "None" | "F23_970" | "F24_000" | "F25_000" | "F29_970" | "F30_000" | "F60_000";
    /** @enum {string} */
    Visibility: "Unknown" | "Private" | "Internal" | "Public";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
